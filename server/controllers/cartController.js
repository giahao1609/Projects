const Product = require('../models/Product'); // ƒê·∫£m b·∫£o ƒë√∫ng ƒë∆∞·ªùng d·∫´n t·ªõi model Product
const Cart = require('../models/cart');

const addToCart = async (req, res) => {
  const { productId, quantity } = req.body;

  if (!productId || !quantity || quantity <= 0) {
    return res.status(400).json({ message: 'Th√¥ng tin kh√¥ng h·ª£p l·ªá' });
  }

  try {
    // L·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ c∆° s·ªü d·ªØ li·ªáu ch·ªâ v·ªõi c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
    const product = await Product.findById(productId).select('name oldPrice discountPrice scale brand series image');

    if (!product) {
      return res.status(404).json({ message: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i' });
    }

    // T√¨m gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
    let cart = await Cart.findOne({ userId: req.user._id });

    if (!cart) {
      // N·∫øu gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i, t·∫°o m·ªõi gi·ªè h√†ng
      cart = new Cart({
        userId: req.user._id,
        items: [{
          productId: product._id,
          quantity,
          name: product.name,
          oldPrice: product.oldPrice,
          discountPrice: product.discountPrice,
          scale: product.scale,
          brand: product.brand,
          series: product.series,
          image: product.image,
        }],
        total: 0
      });
    } else {
      // Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
      const existingIndex = cart.items.findIndex(
        item => item.productId.toString() === productId
      );

      if (existingIndex !== -1) {
        // N·∫øu s·∫£n ph·∫©m ƒë√£ c√≥, c·ªông th√™m s·ªë l∆∞·ª£ng
        cart.items[existingIndex].quantity += quantity;
      } else {
        // N·∫øu s·∫£n ph·∫©m ch∆∞a c√≥, th√™m m·ªõi v√†o gi·ªè h√†ng
        cart.items.push({
          productId: product._id,
          quantity,
          name: product.name,
          oldPrice: product.oldPrice,
          discountPrice: product.discountPrice,
          scale: product.scale,
          brand: product.brand,
          series: product.series,
          image: product.image,
        });
      }
    }

    // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn c·ªßa gi·ªè h√†ng
    cart.total = cart.items.reduce((sum, item) => {
      return sum + (item.discountPrice || item.oldPrice) * item.quantity;
    }, 0);

    await cart.save();
    res.status(200).json({ message: '‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng', total: cart.total });
  } catch (err) {
    console.error('L·ªói khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

const getCart = async (req, res) => {
  try {
    // L·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng v·ªõi th√¥ng tin chi ti·∫øt c√°c s·∫£n ph·∫©m ƒë√£ ch·ªçn
    const cart = await Cart.findOne({ userId: req.user._id }).populate('items.productId');

    if (!cart || cart.items.length === 0) {
      return res.status(200).json({ items: [], total: 0 });
    }

    // T√≠nh to√°n t·ªïng gi√° tr·ªã gi·ªè h√†ng (s·ª≠ d·ª•ng gi√° gi·∫£m ho·∫∑c gi√° c≈©)
    const total = cart.items.reduce((sum, item) => {
      return sum + (item.discountPrice || item.oldPrice) * item.quantity;
    }, 0);

    res.status(200).json({ items: cart.items, total });
  } catch (err) {
    console.error('L·ªói khi l·∫•y gi·ªè h√†ng:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

const removeFromCart = async (req, res) => {
  const { productId } = req.params;

  try {
    // L·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
    const cart = await Cart.findOne({ userId: req.user._id });

    if (!cart) {
      return res.status(404).json({ message: 'Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i' });
    }

    // Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ trong gi·ªè h√†ng kh√¥ng
    const existing = cart.items.some(
      item => item.productId.toString() === productId
    );

    if (!existing) {
      return res.status(404).json({ message: 'S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè h√†ng' });
    }

    // Lo·∫°i b·ªè s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
    cart.items = cart.items.filter(
      item => item.productId.toString() !== productId
    );

    // C·∫≠p nh·∫≠t l·∫°i t·ªïng ti·ªÅn
    cart.total = cart.items.reduce((sum, item) => {
      return sum + (item.discountPrice || item.oldPrice) * item.quantity;
    }, 0);

    await cart.save();
    res.status(200).json({ message: 'üóëÔ∏è ƒê√£ xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng', total: cart.total });
  } catch (err) {
    console.error('L·ªói khi xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

const updateQuantity = async (req, res) => {
  const { productId, quantity } = req.body;

  if (!quantity || quantity <= 0) {
    return res.status(400).json({ message: 'S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0' });
  }

  try {
    // L·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
    const cart = await Cart.findOne({ userId: req.user._id });

    if (!cart) {
      return res.status(404).json({ message: 'Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i' });
    }

    // T√¨m s·∫£n ph·∫©m trong gi·ªè h√†ng
    const index = cart.items.findIndex(
      item => item.productId.toString() === productId
    );

    if (index === -1) {
      return res.status(404).json({ message: 'S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè h√†ng' });
    }

    // C·∫≠p nh·∫≠t l·∫°i s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
    cart.items[index].quantity = quantity;

    // C·∫≠p nh·∫≠t l·∫°i t·ªïng ti·ªÅn
    cart.total = cart.items.reduce((sum, item) => {
      return sum + (item.discountPrice || item.oldPrice) * item.quantity;
    }, 0);

    await cart.save();

    res.status(200).json({ message: 'üîÅ S·ªë l∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t', total: cart.total });
  } catch (err) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

module.exports = {
  addToCart,
  getCart,
  removeFromCart,
  updateQuantity
};
